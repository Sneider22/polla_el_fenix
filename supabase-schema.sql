-- Esquema de base de datos para Polla El Fénix en Supabase
-- Tabla para jugadas de la polla (denormalizada)
CREATE TABLE IF NOT EXISTS jugadas_polla (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_jugador TEXT,
  nro_1 TEXT,
  nro_2 TEXT,
  nro_3 TEXT,
  nro_4 TEXT,
  nro_5 TEXT,
  nro_6 TEXT,
  gratis BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Tabla para jugadas de 3 números (animalitos)
CREATE TABLE IF NOT EXISTS jugadas_micro (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_jugador TEXT,
  nro_1 TEXT,
  nro_2 TEXT,
  nro_3 TEXT,
  gratis BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Tabla de resultados de números ganadores
CREATE TABLE IF NOT EXISTS resultados_numeros (
  id BIGSERIAL PRIMARY KEY,
  fecha_sorteo TIMESTAMPTZ DEFAULT NOW(),
  numeros_ganadores JSONB NOT NULL,
  CONSTRAINT es_array_json CHECK (jsonb_typeof(numeros_ganadores) = 'array')
);

-- Función de validación para numeros_ganadores
CREATE OR REPLACE FUNCTION public.validar_numeros_ganadores()
RETURNS TRIGGER AS $$
DECLARE
    num_text TEXT;
    valid_numbers TEXT[] := ARRAY[
        '0', '00', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
        '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
        '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',
        '31', '32', '33', '34', '35', '36'
    ];
BEGIN
    -- Verificar que cada elemento del array sea válido
    FOR i IN 0..jsonb_array_length(NEW.numeros_ganadores) - 1 LOOP
        num_text := NEW.numeros_ganadores->>i;
        
        IF num_text IS NULL THEN
            RAISE EXCEPTION 'El número ganador no puede ser nulo';
        END IF;
        
        IF num_text NOT IN (SELECT unnest(valid_numbers)) THEN
            RAISE EXCEPTION 'Número inválido: %', num_text;
        END IF;
    END LOOP;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para validar numeros_ganadores
CREATE OR REPLACE TRIGGER trigger_validar_numeros
    BEFORE INSERT OR UPDATE ON public.resultados_numeros
    FOR EACH ROW
    EXECUTE FUNCTION public.validar_numeros_ganadores();

-- Tabla de marcadores diarios
CREATE TABLE IF NOT EXISTS marcadores (
    id BIGSERIAL PRIMARY KEY,
    fecha DATE NOT NULL UNIQUE,
    valor INTEGER NOT NULL DEFAULT 0
);

-- Índices para mejorar el rendimiento
CREATE INDEX IF NOT EXISTS idx_resultados_numeros_fecha_sorteo ON resultados_numeros(fecha_sorteo);
CREATE INDEX IF NOT EXISTS idx_marcadores_fecha ON marcadores(fecha);

-- Función para resetear todos los datos del juego (TRUNCATE)
CREATE OR REPLACE FUNCTION reset_game_data()
RETURNS void AS $$
BEGIN
    TRUNCATE TABLE public.jugadas_polla, 
                     public.jugadas_micro, 
                     public.resultados_numeros, 
                     public.marcadores 
    RESTART IDENTITY;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- Políticas de seguridad RLS (Row Level Security)
ALTER TABLE resultados_numeros ENABLE ROW LEVEL SECURITY;
ALTER TABLE jugadas_micro ENABLE ROW LEVEL SECURITY;
ALTER TABLE jugadas_polla ENABLE ROW LEVEL SECURITY;
ALTER TABLE marcadores ENABLE ROW LEVEL SECURITY;

-- Permisos para la función de reseteo
GRANT EXECUTE ON FUNCTION reset_game_data() TO anon;
GRANT EXECUTE ON FUNCTION reset_game_data() TO authenticated;

-- Políticas para permitir operaciones básicas (ajustar según necesidades de seguridad)
CREATE POLICY "Permitir lectura de resultados_numeros" ON resultados_numeros FOR SELECT USING (true);
CREATE POLICY "Permitir inserción de resultados_numeros" ON resultados_numeros FOR INSERT WITH CHECK (true);
CREATE POLICY "Permitir actualización de resultados_numeros" ON resultados_numeros FOR UPDATE USING (true);
CREATE POLICY "Permitir eliminación de resultados_numeros" ON resultados_numeros FOR DELETE USING (true);

CREATE POLICY "Permitir lectura de jugadas_polla" ON jugadas_polla FOR SELECT USING (true);
CREATE POLICY "Permitir inserción de jugadas_polla" ON jugadas_polla FOR INSERT WITH CHECK (true);
CREATE POLICY "Permitir actualización de jugadas_polla" ON jugadas_polla FOR UPDATE USING (true);
CREATE POLICY "Permitir eliminación de jugadas_polla" ON jugadas_polla FOR DELETE USING (true);

CREATE POLICY "Permitir lectura de jugadas_micro" ON jugadas_micro FOR SELECT USING (true);
CREATE POLICY "Permitir inserción de jugadas_micro" ON jugadas_micro FOR INSERT WITH CHECK (true);
CREATE POLICY "Permitir actualización de jugadas_micro" ON jugadas_micro FOR UPDATE USING (true);
CREATE POLICY "Permitir eliminación de jugadas_micro" ON jugadas_micro FOR DELETE USING (true);

CREATE POLICY "Permitir lectura de marcadores" ON marcadores FOR SELECT USING (true);
CREATE POLICY "Permitir inserción de marcadores" ON marcadores FOR INSERT WITH CHECK (true);
CREATE POLICY "Permitir actualización de marcadores" ON marcadores FOR UPDATE USING (true);
CREATE POLICY "Permitir eliminación de marcadores" ON marcadores FOR DELETE USING (true);

-- Comentarios para documentación
COMMENT ON TABLE jugadas_polla IS 'Tabla denormalizada que almacena las jugadas de la polla con el nombre del jugador directamente.';
COMMENT ON TABLE jugadas_micro IS 'Tabla denormalizada que almacena las jugadas de 3 números (animalitos).';
COMMENT ON TABLE resultados_numeros IS 'Tabla que almacena los números ganadores de cada sorteo en un campo JSONB.';
COMMENT ON TABLE marcadores IS 'Tabla que almacena los valores del marcador por día';
COMMENT ON FUNCTION reset_game_data IS 'Función para borrar todos los datos de las tablas transaccionales y reiniciar los contadores de ID.';
